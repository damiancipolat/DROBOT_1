//Drive a robot turning left.
void drive_robot_turn_left(led ledA,led ledB, engine motorA, engine motorB, float desired_heading, float heading,int desviation, int minus_value){

  desired_heading = (desired_heading - minus_value);
  if (desired_heading <= 0) {
    desired_heading = (desired_heading + 360);
  }

  //Move the robot.
  while ( abs(desired_heading - heading) >= desviation){
    heading = getAcimut();
        
    if (desired_heading >= 360){
      desired_heading = (desired_heading - 360);
    }
                                                                
    int x = (desired_heading-359);
    int y = (heading-x);
    int z = y-360;
    
    if (z <= 180){
      turnOn(ledA);
      turnOff(ledB);
      turnLeft(motorA,motorB);
    } else {
      turnOff(ledA);
      turnOn(ledB);      
      turnRigth(motorA,motorB);
    }
  }

  //Pause car.
  pause(motorA);
  pause(motorB);

}

//Drive a robot turning rigth.
void drive_robot_turn_rigth(led ledA,led ledB, engine motorA, engine motorB, float desired_heading, float heading,int desviation, int add_value){

  desired_heading = (desired_heading + add_value);
  if (desired_heading >=360) {
    desired_heading = (desired_heading - 360);
  }

  //Move the robot.
  while ( abs(desired_heading - heading) >= desviation){
    heading = getAcimut();
        
    if (desired_heading >= 360){
      desired_heading = (desired_heading - 360);
    }
                                                                
    int x = (desired_heading-359);
    int y = (heading-x);
    int z = y-360;

    if ((z <= 180) && (z >= 0)){
      turnOn(ledA);
      turnOff(ledB);
      turnLeft(motorA,motorB);
    } else {
      turnOff(ledA);
      turnOn(ledB);
      turnRigth(motorA,motorB);
    }
  }

  //Pause car.
  pause(motorA);
  pause(motorB);

}